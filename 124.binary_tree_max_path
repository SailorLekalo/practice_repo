# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    greatest: int = -2000
    def maxSubPath(self, node: Optional[TreeNode]) -> int:
        if node.left == None and node.right == None:
            self.greatest = self.greatest if self.greatest > node.val else node.val
            return node.val if node.val > 0 else 0
        if node.left == None:
            right = self.maxSubPath(node.right) + node.val
            self.greatest = self.greatest if self.greatest > right  else right
            return right if right > 0 else 0
        if node.right == None:
            left = self.maxSubPath(node.left) + node.val
            self.greatest = self.greatest if self.greatest > left  else left
            return left if left > 0 else 0
        
        right = self.maxSubPath( node.right)
        left = self.maxSubPath( node.left)
        new = right + left + node.val
        self.greatest = self.greatest if self.greatest > new else new
        if (right + node.val) < 0 and (left + node.val) < 0:
            return 0
        return right + node.val if right > left else left + node.val

    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        left = self.maxSubPath(root.left) if root.left != None else 0
        right = self.maxSubPath(root.right) if root.right != None else 0
        total = root.val + left + right
        return self.greatest if self.greatest > total else total
